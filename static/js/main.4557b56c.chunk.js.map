{"version":3,"sources":["component/card/Card.jsx","component/card-list/Card-list.jsx","component/search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CartList","monsters","map","SearchBox","placeHolder","OnChangeHandler","type","placeholder","onChange","App","state","searchField","fetch","then","reponse","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAEaA,EAAO,SAAAC,GAChB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,YCHbC,G,MAAW,SAAAP,GACpB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHdM,G,MAAY,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,gBACpC,OAEI,uBAAOX,UAAU,SACfY,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCyCLI,E,kDA5Cb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAASe,S,oBAGzC,WAAS,IAAD,SAC0BE,KAAKR,MAA9BT,EADD,EACCA,SAAUU,EADX,EACWA,YACXQ,EAAmBlB,EAASmB,QAAO,SAAAxB,GAAO,OAC9CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAOlD,OACE,sBAAK3B,UAAU,MAAf,UACE,mDAEA,cAAC,EAAD,CACAU,YAAY,kBACZC,gBAVmB,SAACkB,GACrB,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAYpC,cAAC,EAAD,CACAxB,SAAUkB,W,GApCAO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4557b56c.chunk.js","sourcesContent":["import './card.style.css'\r\n\r\nexport const Card = props => {\r\n    return <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h3>{props.monster.name}</h3>\r\n        <p>{props.monster.email}</p>\r\n     </div>\r\n}","import { Card } from '../card/Card';\r\nimport './card-list.style.css';\r\n\r\nexport const CartList = props => {\r\n    return <div className=\"card-list\">          \r\n        {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />))}\r\n    </div>\r\n}","import React from 'react'\r\nimport './SearchBox.style.css'\r\n\r\nexport const SearchBox = ({placeHolder, OnChangeHandler}) => {\r\n    return (\r\n\r\n        <input className=\"search\"\r\n          type=\"search\"\r\n          placeholder={placeHolder}\r\n          onChange={OnChangeHandler}\r\n        />\r\n    )\r\n}\r\n","import react, {Component} from 'react'\nimport './App.css';\nimport { CartList } from './component/card-list/Card-list'\nimport { SearchBox } from './component/search-box/SearchBox'\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(reponse => reponse.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    \n    const onChageHandler = (e) => {\n       this.setState({searchField: e.target.value})\n    }\n    \n    return(\n      <div className=\"App\">\n        <h1> Monster rolodex </h1>\n\n        <SearchBox \n        placeHolder=\"Search monsters\" \n        OnChangeHandler={onChageHandler}\n        />\n\n        <CartList \n        monsters={filteredMonsters} \n        />\n      </div>\n        \n    )\n    \n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}